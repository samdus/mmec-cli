buildscript {
  repositories {
    mavenLocal()
    if(project.getProperties().get("archiveAddress")) {
      maven {
        credentials {
          username project.getProperties().get("archiveUsername")
          password project.getProperties().get("archivePassword")
        }
        url project.getProperties().get("archiveAddress")
      }
    }
    maven {url "https://plugins.gradle.org/m2/"}
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "ca.griis:compliance-application:2.+"
  }
}

plugins {
  id "application"
}

ext {
  minCoverageUnit = 0
  minCoverageUnitItgr = 0
  minMutationUnit = 0
  isSpringBoot = false
}

group = "ca.griis"
version = "1.0.0"
ext.product = "APPLICATION_CLI"
ext.applicationMain = "ca.griis.mmec.MMecApplication"

apply plugin: ca.griis.compliance.GriisPlugin

dependencies {
  annotationProcessor "info.picocli:picocli-codegen:4.7.4"
  implementation "info.picocli:picocli:4.7.6"

  implementation "ca.griis:logger-library:1.+"
  implementation "ch.qos.logback:logback-classic"
  implementation 'org.slf4j:slf4j-api:2.0.0'

  implementation "ca.griis:mMec-library:1.+"

  testImplementation "org.mockito:mockito-core"
  testImplementation "org.mockito:mockito-junit-jupiter"
  testImplementation "org.junit.jupiter:junit-jupiter-engine"
  testImplementation "org.junit.jupiter:junit-jupiter-params"

  // Versions minimales des dépendances transitives de RDF4J pour prévenir le CVE-2018-1000644
  implementation "org.eclipse.rdf4j:rdf4j-queryparser-serql:[2.4.0, )"
  implementation "org.eclipse.rdf4j:rdf4j-sail-base:[2.4.0, )"
  implementation "org.eclipse.rdf4j:rdf4j-sail-inferencer:[2.4.0, )"
  implementation "org.eclipse.rdf4j:rdf4j-sail-memory:[2.4.0, )"
  implementation "org.eclipse.rdf4j:rdf4j-sail-model:[2.4.0, )"
}

application {
  mainClass = applicationMain
}


//TODO: Modifier compliance pour ajouter le répertoire "build/distributions" aux artefacts
tasks.register('majDistribution') {
  dependsOn(tasks.named("distZip"))

  def fileName = "mmec-cli-${project.version}.zip"
  doFirst {
    def zipFile = layout.buildDirectory.file("distributions/${fileName}").get().getAsFile()
    def libsDir = layout.buildDirectory.dir("libs").get().getAsFile()

    if(!zipFile.exists()) {
      throw new GradleException("Cannot find ${zipFile.getPath()}.")
    }

    if (!libsDir.exists()) {
      println("Creating libs directory...")
      if (!libsDir.mkdirs()) {
        throw new GradleException("Cannot create libs directory.")
      }
    }
  }

  doLast {
    copy {
      from layout.buildDirectory.file("distributions/${fileName}")
      into layout.buildDirectory.dir("libs")
    }

    def zipFile = layout.buildDirectory.file("libs/${fileName}").get().getAsFile()
    if (!zipFile.exists()) {
      throw new GradleException("File ${fileName} as not been copied.")
    }
  }
}

tasks.named("construction") {
  finalizedBy(tasks.named("majDistribution"))
}
